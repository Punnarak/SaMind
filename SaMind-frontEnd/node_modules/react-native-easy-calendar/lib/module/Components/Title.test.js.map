{"version":3,"sources":["Title.test.tsx"],"names":["React","dayjs","utc","render","fireEvent","ThemeContext","DefaultTheme","DefaultLocale","VIEW","Title","extend","test","title","TitlePage","expect","component","toBeTruthy","date","locale","text","toHaveTextContent","describe","activeView","MONTH","YEAR","testLocale","onPress","jest","fn","press","toHaveBeenCalledTimes","month","isDisabled","toBeDisabled","toBeEnabled","toHaveStyle","theme","titleContainer","titleText","constructor","getByTestId","getByRole","months","marginTop","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport type { ReactTestInstance } from 'react-test-renderer';\nimport { render, fireEvent } from '@testing-library/react-native';\n\nimport { ThemeContext } from '../Contexts';\nimport { DefaultTheme } from '../Themes';\nimport { DefaultLocale } from '../Locales';\nimport { VIEW } from '../Constants';\n\nimport Title, { Props } from './Title';\n\ndayjs.extend(utc);\n\ntest('Title render without error', () => {\n  const title = new TitlePage({});\n  expect(title.component).toBeTruthy();\n});\n\ntest('Title renders date string in default format', () => {\n  const title = new TitlePage({ date: '2020-09-18', locale: DefaultLocale });\n  expect(title.text).toHaveTextContent('September 2020');\n});\n\ndescribe('Title format switches depending on the active view', () => {\n  test('Month view format', () => {\n    const title = new TitlePage({ date: '2020-09-18', activeView: VIEW.MONTH });\n    expect(title.text).toHaveTextContent('September 2020');\n  });\n\n  test('Year view format', () => {\n    const title = new TitlePage({ date: '2020-09-18', activeView: VIEW.YEAR });\n    expect(title.text).toHaveTextContent('2020');\n  });\n});\n\ntest('Title receives locale context', () => {\n  const title = new TitlePage({ date: '2020-09-18', locale: testLocale });\n  expect(title.text).toHaveTextContent('I 2020');\n});\n\ntest('Title calls onPress callback when clicked', () => {\n  const onPress = jest.fn();\n  const title = new TitlePage({ onPress });\n  fireEvent.press(title.component);\n  expect(onPress).toHaveBeenCalledTimes(1);\n});\n\ndescribe('Enabling and disabling', () => {\n  test('Disable clicking if prop ´isDisabled´ is true', () => {\n    const month = new TitlePage({ isDisabled: true });\n    expect(month.component).toBeDisabled();\n  });\n\n  test('Enable clicking if prop ´isDisabled´ is false', () => {\n    const month = new TitlePage({ isDisabled: false });\n    expect(month.component).toBeEnabled();\n  });\n});\n\ndescribe('Theme context', () => {\n  test('Title container applies titleContainer theme', () => {\n    const title = new TitlePage({});\n    expect(title.component).toHaveStyle(theme.titleContainer);\n  });\n\n  test('Title text applies titleText theme', () => {\n    const title = new TitlePage({});\n    expect(title.text).toHaveStyle(theme.titleText);\n  });\n});\n\nclass TitlePage {\n  component: ReactTestInstance;\n  text: ReactTestInstance;\n\n  constructor({\n    date = '2020-01-01',\n    locale = DefaultLocale,\n    onPress = () => {},\n    isDisabled = false,\n    activeView = VIEW.MONTH,\n  }: Partial<Props>) {\n    const { getByTestId, getByRole } = render(\n      <ThemeContext.Provider value={theme}>\n        <Title {...{ locale, activeView, date, onPress, isDisabled }} />\n      </ThemeContext.Provider>\n    );\n\n    this.component = getByRole('button');\n    this.text = getByTestId('title-text');\n  }\n}\n\nconst testLocale = {\n  ...DefaultLocale,\n  months: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'],\n};\n\nconst theme = {\n  ...DefaultTheme,\n  titleContainer: {\n    marginTop: 10,\n    backgroundColor: 'orange',\n  },\n  titleText: {\n    color: 'pink',\n  },\n};\n"]}