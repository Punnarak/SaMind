{"version":3,"sources":["Months.tsx"],"names":["React","useMemo","View","dayjs","ThemeContext","LocaleContext","dateRange","Month","DefaultMonth","Months","MonthComponent","CustomMonth","onPressMonth","dateProperties","visibleDate","minDate","maxDate","theme","useContext","locale","monthsOfVisibleYear","startOf","endOf","selectedMonths","Object","entries","reduce","selected","date","properties","isSelected","month","format","monthsContainer","map","index","isAfter","isBefore","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAOC,KAAP,MAA6B,OAA7B;AAGA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,aAA5C;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,GAAtC;;AAiBA,MAAMC,MAAuB,GAAG,CAAC;AAC/BC,EAAAA,cAAc,EAAEC,WADe;AAE/BC,EAAAA,YAF+B;AAG/BC,EAAAA,cAH+B;AAI/BC,EAAAA,WAJ+B;AAK/BC,EAAAA,OAL+B;AAM/BC,EAAAA;AAN+B,CAAD,KAO1B;AACJ,QAAMC,KAAK,GAAGjB,KAAK,CAACkB,UAAN,CAAwBd,YAAxB,CAAd;AACA,QAAMe,MAAM,GAAGnB,KAAK,CAACkB,UAAN,CAAyBb,aAAzB,CAAf;AAEA,QAAMe,mBAAmB,GAAGd,SAAS,CACnCQ,WAAW,CAACO,OAAZ,CAAoB,MAApB,CADmC,EAEnCP,WAAW,CAACQ,KAAZ,CAAkB,MAAlB,CAFmC,EAGnC,OAHmC,CAArC;AAMA,QAAMC,cAAc,GAAGtB,OAAO,CAAC,MAAM;AACnC,WAAOuB,MAAM,CAACC,OAAP,CAAeZ,cAAf,EAA+Ba,MAA/B,CACL,CAACC,QAAD,EAAoC,CAACC,IAAD,EAAOC,UAAP,CAApC,KAA2D;AACzD,UAAIA,UAAU,CAACC,UAAf,EAA2B;AACzB,cAAMC,KAAK,GAAG5B,KAAK,CAACyB,IAAD,CAAL,CAAYP,OAAZ,CAAoB,OAApB,EAA6BW,MAA7B,CAAoC,YAApC,CAAd;AACAL,QAAAA,QAAQ,CAACI,KAAD,CAAR,GAAkB,IAAlB;AACD;;AACD,aAAOJ,QAAP;AACD,KAPI,EAQL,EARK,CAAP;AAUD,GAX6B,EAW3B,CAACd,cAAD,CAX2B,CAA9B;AAaA,QAAMN,KAAK,GAAGI,WAAW,IAAIH,YAA7B;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,KAAK,CAACgB,eAAnB;AAAoC,IAAA,MAAM,EAAE;AAA5C,KACGb,mBAAmB,CAACc,GAApB,CAAwB,CAACH,KAAD,EAAQI,KAAR,KAAkB;AACzC,wBACE,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,MAAM,EAAEhB,MAFV;AAGE,MAAA,IAAI,EAAEY,KAAK,CAACC,MAAN,CAAa,YAAb,CAHR;AAIE,MAAA,UAAU,EAAET,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAa,YAAb,CAAD,CAJ5B;AAKE,MAAA,OAAO,EAAEpB,YALX;AAME,MAAA,UAAU,EACR,CAAC,EAAEI,OAAO,IAAIe,KAAK,CAACV,OAAN,CAAc,OAAd,EAAuBe,OAAvB,CAA+BpB,OAA/B,EAAwC,KAAxC,CAAb,CAAD,IACA,CAAC,EAAED,OAAO,IAAIgB,KAAK,CAACT,KAAN,CAAY,OAAZ,EAAqBe,QAArB,CAA8BtB,OAA9B,EAAuC,KAAvC,CAAb;AARL,MADF;AAaD,GAdA,CADH,CADF;AAmBD,CAlDD;;AAoDA,4BAAef,KAAK,CAACsC,IAAN,CAAW7B,MAAX,CAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { View } from 'react-native';\nimport dayjs, { Dayjs } from 'dayjs';\n\nimport type { DateProperties, Theme, MonthComponentType, Locale } from '../Entities';\nimport { ThemeContext, LocaleContext } from '../Contexts';\nimport { dateRange } from '../Utils';\n\nimport { Month as DefaultMonth } from '.';\n\nexport interface Props {\n  MonthComponent?: MonthComponentType;\n  // Receives a start-of-month date in YYYY-MM-DD format (ex. 2020-01-01 for the month of January, 2020)\n  onPressMonth: (date: string) => void;\n  // YYYY-MM-DD format string respresenting the start-of-month date of currently visible month\n  visibleDate: Dayjs;\n  // YYYY-MM-DD format string respresenting the minimum date that can be selected\n  minDate?: string;\n  // YYYY-MM-DD format string respresenting the maximum date that can be selected\n  maxDate?: string;\n  dateProperties: {\n    [date: string /* YYYY-MM-DD */]: DateProperties;\n  };\n}\n\nconst Months: React.FC<Props> = ({\n  MonthComponent: CustomMonth,\n  onPressMonth,\n  dateProperties,\n  visibleDate,\n  minDate,\n  maxDate,\n}) => {\n  const theme = React.useContext<Theme>(ThemeContext);\n  const locale = React.useContext<Locale>(LocaleContext);\n\n  const monthsOfVisibleYear = dateRange(\n    visibleDate.startOf('year'),\n    visibleDate.endOf('year'),\n    'month'\n  );\n\n  const selectedMonths = useMemo(() => {\n    return Object.entries(dateProperties).reduce(\n      (selected: Record<string, boolean>, [date, properties]) => {\n        if (properties.isSelected) {\n          const month = dayjs(date).startOf('month').format('YYYY-MM-DD');\n          selected[month] = true;\n        }\n        return selected;\n      },\n      {}\n    );\n  }, [dateProperties]);\n\n  const Month = CustomMonth || DefaultMonth;\n  return (\n    <View style={theme.monthsContainer} testID={'months-container'}>\n      {monthsOfVisibleYear.map((month, index) => {\n        return (\n          <Month\n            key={index}\n            locale={locale}\n            date={month.format('YYYY-MM-DD')}\n            isSelected={selectedMonths[month.format('YYYY-MM-DD')]}\n            onPress={onPressMonth}\n            isDisabled={\n              !!(maxDate && month.startOf('month').isAfter(maxDate, 'day')) ||\n              !!(minDate && month.endOf('month').isBefore(minDate, 'day'))\n            }\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nexport default React.memo(Months);\n"]}