{"version":3,"sources":["clamp.test.ts"],"names":["clamp","describe","test","expect","toBe"],"mappings":"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","sourcesContent":["import clamp from './clamp';\n\ndescribe('works in the positive ranges', () => {\n  test('returns the input in range min..max', () => {\n    expect(clamp(10, 10, 20)).toBe(10);\n    expect(clamp(20, 10, 20)).toBe(20);\n  });\n\n  test('returns the maximum for values greater than the maximum', () => {\n    expect(clamp(21, 10, 20)).toBe(20);\n    expect(clamp(200, 10, 20)).toBe(20);\n    expect(clamp(20000, 10, 20)).toBe(20);\n  });\n\n  test('returns the minimum for values less than the minimum', () => {\n    expect(clamp(9, 10, 20)).toBe(10);\n    expect(clamp(0, 10, 20)).toBe(10);\n    expect(clamp(-10, 10, 20)).toBe(10);\n  });\n});\n\ndescribe('works in negative ranges', () => {\n  test('returns the input in range min..max', () => {\n    expect(clamp(-100, -100, -20)).toBe(-100);\n    expect(clamp(-20, -100, -20)).toBe(-20);\n  });\n\n  test('returns the maximum for values greater than the maximum', () => {\n    expect(clamp(-9, -20, -10)).toBe(-10);\n    expect(clamp(0, -20, -10)).toBe(-10);\n    expect(clamp(200, -20, -10)).toBe(-10);\n  });\n\n  test('returns the minimum for values less than the minimum', () => {\n    expect(clamp(-21, -20, -10)).toBe(-20);\n    expect(clamp(-100, -20, -10)).toBe(-20);\n    expect(clamp(-10000, -20, -10)).toBe(-20);\n  });\n});\n"]}