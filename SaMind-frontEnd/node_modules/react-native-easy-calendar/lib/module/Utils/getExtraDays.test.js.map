{"version":3,"sources":["getExtraDays.test.ts"],"names":["dayjs","getExtraDays","test","result","from","to","expect","toEqual","describe","length","toBe","isSame","toBeTruthy"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEAC,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,QAAMC,MAAM,GAAGF,YAAY,CAAC;AAC1BG,IAAAA,IAAI,EAAEJ,KAAK,CAAC,YAAD,CADe;AAE1BK,IAAAA,EAAE,EAAEL,KAAK,CAAC,YAAD;AAFiB,GAAD,CAA3B;AAKAM,EAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,OAAf,CAAuB,EAAvB;AACD,CAPG,CAAJ;AASAC,QAAQ,CAAC,gDAAD,EAAmD,MAAM;AAC/DN,EAAAA,IAAI,CAAC,OAAD,EAAU,MAAM;AAClB,UAAMC,MAAM,GAAGF,YAAY,CAAC;AAC1BG,MAAAA,IAAI,EAAEJ,KAAK,CAAC,YAAD,CADe;AAE1BK,MAAAA,EAAE,EAAEL,KAAK,CAAC,YAAD;AAFiB,KAAD,CAA3B;AAKAM,IAAAA,MAAM,CAACH,MAAM,CAACM,MAAR,CAAN,CAAsBC,IAAtB,CAA2B,CAA3B;AACAJ,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACD,GARG,CAAJ;AAUAV,EAAAA,IAAI,CAAC,QAAD,EAAW,MAAM;AACnB,UAAMC,MAAM,GAAGF,YAAY,CAAC;AAC1BG,MAAAA,IAAI,EAAEJ,KAAK,CAAC,YAAD,CADe;AAE1BK,MAAAA,EAAE,EAAEL,KAAK,CAAC,YAAD;AAFiB,KAAD,CAA3B;AAKAM,IAAAA,MAAM,CAACH,MAAM,CAACM,MAAR,CAAN,CAAsBC,IAAtB,CAA2B,CAA3B;AACAJ,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACAN,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACD,GATG,CAAJ;AAWAV,EAAAA,IAAI,CAAC,QAAD,EAAW,MAAM;AACnB,UAAMC,MAAM,GAAGF,YAAY,CAAC;AAC1BG,MAAAA,IAAI,EAAEJ,KAAK,CAAC,YAAD,CADe;AAE1BK,MAAAA,EAAE,EAAEL,KAAK,CAAC,YAAD;AAFiB,KAAD,CAA3B;AAKAM,IAAAA,MAAM,CAACH,MAAM,CAACM,MAAR,CAAN,CAAsBC,IAAtB,CAA2B,CAA3B;AACAJ,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACAN,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACAN,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACAN,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACAN,IAAAA,MAAM,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAAV,CAAiB,YAAjB,EAA+B,KAA/B,CAAD,CAAN,CAA8CC,UAA9C;AACD,GAZG,CAAJ;AAaD,CAnCO,CAAR","sourcesContent":["import dayjs from 'dayjs';\nimport getExtraDays from './getExtraDays';\n\ntest('Negative range - \"to\" is before \"from\"', () => {\n  const result = getExtraDays({\n    from: dayjs('2020-01-02'),\n    to: dayjs('2020-01-01'),\n  });\n\n  expect(result).toEqual([]);\n});\n\ndescribe('Positive range - \"to\" is equal to/after \"from\"', () => {\n  test('1 day', () => {\n    const result = getExtraDays({\n      from: dayjs('2020-01-01'),\n      to: dayjs('2020-01-01'),\n    });\n\n    expect(result.length).toBe(1);\n    expect(result[0].isSame('2020-01-01', 'day')).toBeTruthy();\n  });\n\n  test('2 days', () => {\n    const result = getExtraDays({\n      from: dayjs('2020-01-01'),\n      to: dayjs('2020-01-02'),\n    });\n\n    expect(result.length).toBe(2);\n    expect(result[0].isSame('2020-01-01', 'day')).toBeTruthy();\n    expect(result[1].isSame('2020-01-02', 'day')).toBeTruthy();\n  });\n\n  test('5 days', () => {\n    const result = getExtraDays({\n      from: dayjs('2020-01-01'),\n      to: dayjs('2020-01-05'),\n    });\n\n    expect(result.length).toBe(5);\n    expect(result[0].isSame('2020-01-01', 'day')).toBeTruthy();\n    expect(result[1].isSame('2020-01-02', 'day')).toBeTruthy();\n    expect(result[2].isSame('2020-01-03', 'day')).toBeTruthy();\n    expect(result[3].isSame('2020-01-04', 'day')).toBeTruthy();\n    expect(result[4].isSame('2020-01-05', 'day')).toBeTruthy();\n  });\n});\n"]}