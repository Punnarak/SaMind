function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import BaseCalendarWrappedInProviders from './Providers';
dayjs.extend(utc);

// A thin wrapper to limit the props that can be passed to the BaseCalendar component
const MultiDateSelectionCalendar = ({
  onSelectDates,
  disabledDates,
  selectedDates,
  allowYearView = true,
  ...others
}) => {
  if (!selectedDates) {
    throw new Error('The `selectedDates` prop is required. Use an empty array if no dates should be selected.');
  }

  if (typeof selectedDates !== 'object') {
    throw new Error('The `selectedDates` prop should be an array of date strings in YYYY-MM-DD format.');
  }

  if (!onSelectDates) {
    throw new Error('The `onSelectDates` prop is required.');
  }

  if (typeof onSelectDates !== 'function') {
    throw new Error('The `onSelectDates` prop should be function that receives an array of date strings as paramater.');
  }

  const selDatesRef = React.useRef(selectedDates);
  const dateProperties = useMemo(() => {
    const disabledDateProperties = disabledDates === null || disabledDates === void 0 ? void 0 : disabledDates.reduce((disabled, date) => {
      disabled[date] = {
        isDisabled: true
      };
      return disabled;
    }, {});
    const selectedDateProperties = selectedDates.reduce((selected, date) => {
      selected[date] = {
        isSelected: true
      };
      return selected;
    }, {}); // Not possible for a date to be both disabled and selected, so overwriting is OK

    return { ...disabledDateProperties,
      ...selectedDateProperties
    };
  }, [selectedDates, disabledDates]);

  const remove = dateToRemove => {
    const newSelectedDates = selDatesRef.current.filter(date => date !== dateToRemove);
    selDatesRef.current = newSelectedDates;
    return newSelectedDates;
  };

  const append = dateToAppend => {
    const newSelectedDates = [...selDatesRef.current, dateToAppend].sort();
    selDatesRef.current = newSelectedDates;
    return newSelectedDates;
  };

  const onPressDay = React.useCallback(date => {
    if (selDatesRef.current.includes(date)) {
      onSelectDates(remove(date));
    } else {
      onSelectDates(append(date));
    }
  }, [onSelectDates]);
  return /*#__PURE__*/React.createElement(BaseCalendarWrappedInProviders, _extends({
    onPressDay: onPressDay,
    allowYearView: allowYearView,
    dateProperties: dateProperties
  }, others));
};

export default MultiDateSelectionCalendar;
//# sourceMappingURL=MultiDateSelectionCalendar.js.map