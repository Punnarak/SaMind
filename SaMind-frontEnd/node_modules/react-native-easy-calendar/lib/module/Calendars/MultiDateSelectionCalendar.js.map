{"version":3,"sources":["MultiDateSelectionCalendar.tsx"],"names":["React","useMemo","dayjs","utc","BaseCalendarWrappedInProviders","extend","MultiDateSelectionCalendar","onSelectDates","disabledDates","selectedDates","allowYearView","others","Error","selDatesRef","useRef","dateProperties","disabledDateProperties","reduce","disabled","date","isDisabled","selectedDateProperties","selected","isSelected","remove","dateToRemove","newSelectedDates","current","filter","append","dateToAppend","sort","onPressDay","useCallback","includes"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport BaseCalendarWrappedInProviders from './Providers';\nimport type { DateProperties, WrapperCalendarProps } from '../Entities';\n\ndayjs.extend(utc);\n\ninterface SpecificProps {\n  onSelectDates: (dates: string[]) => void;\n  selectedDates: string[];\n}\n\ntype Props = SpecificProps & WrapperCalendarProps;\n\n// A thin wrapper to limit the props that can be passed to the BaseCalendar component\nconst MultiDateSelectionCalendar: React.FC<Props> = ({\n  onSelectDates,\n  disabledDates,\n  selectedDates,\n  allowYearView = true,\n  ...others\n}) => {\n  if (!selectedDates) {\n    throw new Error(\n      'The `selectedDates` prop is required. Use an empty array if no dates should be selected.'\n    );\n  }\n\n  if (typeof selectedDates !== 'object') {\n    throw new Error(\n      'The `selectedDates` prop should be an array of date strings in YYYY-MM-DD format.'\n    );\n  }\n\n  if (!onSelectDates) {\n    throw new Error('The `onSelectDates` prop is required.');\n  }\n\n  if (typeof onSelectDates !== 'function') {\n    throw new Error(\n      'The `onSelectDates` prop should be function that receives an array of date strings as paramater.'\n    );\n  }\n\n  const selDatesRef = React.useRef<string[]>(selectedDates);\n\n  const dateProperties = useMemo(() => {\n    const disabledDateProperties = disabledDates?.reduce(\n      (disabled: Record<string, DateProperties>, date) => {\n        disabled[date] = { isDisabled: true };\n        return disabled;\n      },\n      {}\n    );\n\n    const selectedDateProperties = selectedDates.reduce(\n      (selected: Record<string, DateProperties>, date) => {\n        selected[date] = { isSelected: true };\n        return selected;\n      },\n      {}\n    );\n\n    // Not possible for a date to be both disabled and selected, so overwriting is OK\n    return {\n      ...disabledDateProperties,\n      ...selectedDateProperties,\n    };\n  }, [selectedDates, disabledDates]);\n\n  const remove = (dateToRemove: string) => {\n    const newSelectedDates = selDatesRef.current.filter((date) => date !== dateToRemove);\n    selDatesRef.current = newSelectedDates;\n    return newSelectedDates;\n  };\n\n  const append = (dateToAppend: string) => {\n    const newSelectedDates = [...selDatesRef.current, dateToAppend].sort();\n    selDatesRef.current = newSelectedDates;\n    return newSelectedDates;\n  };\n\n  const onPressDay = React.useCallback(\n    (date: string) => {\n      if (selDatesRef.current.includes(date)) {\n        onSelectDates(remove(date));\n      } else {\n        onSelectDates(append(date));\n      }\n    },\n    [onSelectDates]\n  );\n\n  return (\n    <BaseCalendarWrappedInProviders\n      onPressDay={onPressDay}\n      allowYearView={allowYearView}\n      dateProperties={dateProperties}\n      {...others}\n    />\n  );\n};\n\nexport default MultiDateSelectionCalendar;\n"]}