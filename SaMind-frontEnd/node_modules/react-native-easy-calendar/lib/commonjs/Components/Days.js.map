{"version":3,"sources":["Days.tsx"],"names":["Days","minDate","maxDate","visibleDate","showExtraDates","onPressDay","dateProperties","DayComponent","CustomDay","theme","React","useContext","ThemeContext","month","local","format","daysOfVisibleMonth","current","start","end","initSlotsAvailable","day","daysInWeek","finalSlotsAvailable","nOfSlotsToFill6Rows","length","initialSlots","from","last","subtract","to","finalSlots","next","add","Day","DefaultDay","daysContainer","map","index","dayProperties","date","isSame","isDisabled","Boolean","isBefore","isAfter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport type { Dayjs } from 'dayjs';\n\nimport type { DateProperties, Theme, DayComponentType } from '../Entities';\nimport { useSurroundingTimeUnits } from '../Hooks';\nimport { getExtraDays, dateRange } from '../Utils';\nimport { ThemeContext } from '../Contexts';\nimport { Day as DefaultDay } from '.';\n\nexport interface Props {\n  DayComponent?: DayComponentType;\n  visibleDate: Dayjs;\n  minDate?: string;\n  maxDate?: string;\n  showExtraDates: boolean; // Fill in empty day slots with previous and next month's days\n  onPressDay: (date: string) => void; // Receives date in YYYY-MM-DD format (ex. 2020-01-15 for January 15th, 2020)\n  dateProperties: {\n    [date: string /* YYYY-MM-DD */]: DateProperties;\n  };\n}\n\nconst Days: React.FC<Props> = ({\n  minDate,\n  maxDate,\n  visibleDate,\n  showExtraDates,\n  onPressDay,\n  dateProperties,\n  DayComponent: CustomDay,\n}) => {\n  const theme = React.useContext<Theme>(ThemeContext);\n  const { month } = useSurroundingTimeUnits(visibleDate.local().format());\n  const daysOfVisibleMonth = dateRange(month.current.start, month.current.end);\n\n  const initSlotsAvailable = month.current.start.day();\n  const daysInWeek = 6; // 0-indexed\n  let finalSlotsAvailable = daysInWeek - month.current.end.day();\n\n  const nOfSlotsToFill6Rows = 7 * 6;\n  if (\n    initSlotsAvailable + daysOfVisibleMonth.length + finalSlotsAvailable <\n    nOfSlotsToFill6Rows\n  ) {\n    // Add an extra row at the end of the calendar\n    finalSlotsAvailable += 7;\n  }\n\n  const initialSlots: Dayjs[] = getExtraDays({\n    from: month.last.end.subtract(initSlotsAvailable - 1, 'day'),\n    to: month.last.end,\n  });\n\n  const finalSlots: Dayjs[] = getExtraDays({\n    from: month.next.start,\n    to: month.next.start.add(finalSlotsAvailable - 1, 'day'),\n  });\n\n  const Day = CustomDay || DefaultDay;\n  return (\n    <View style={theme.daysContainer} testID={'days-container'}>\n      {initialSlots.map((day, index) => (\n        <Day\n          key={index}\n          showExtraDates={showExtraDates}\n          date={day.format()}\n          onPress={onPressDay}\n          isDisabled\n          isExtraDay\n        />\n      ))}\n      {daysOfVisibleMonth.map((day) => {\n        const dayProperties = dateProperties[day.format('YYYY-MM-DD')];\n        return (\n          <Day\n            {...dayProperties}\n            key={day.date()}\n            date={day.local().format('YYYY-MM-DD')}\n            showExtraDates={showExtraDates}\n            isStartOfMonth={month.current.start.isSame(day, 'day')}\n            isEndOfMonth={month.current.end.isSame(day, 'day')}\n            isStartOfWeek={day.day() === 0}\n            isEndOfWeek={day.day() === 6}\n            onPress={onPressDay}\n            isExtraDay={false}\n            isDisabled={\n              dayProperties?.isDisabled ||\n              Boolean(minDate && day.isBefore(minDate, 'day')) ||\n              Boolean(maxDate && day.isAfter(maxDate, 'day'))\n            }\n          />\n        );\n      })}\n      {finalSlots.map((day, index) => (\n        <Day\n          key={index}\n          date={day.format()}\n          showExtraDates={showExtraDates}\n          onPress={onPressDay}\n          isDisabled\n          isExtraDay\n        />\n      ))}\n    </View>\n  );\n};\n\nexport default Days;\n"]}