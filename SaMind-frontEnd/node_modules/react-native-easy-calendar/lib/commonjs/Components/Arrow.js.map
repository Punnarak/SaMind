{"version":3,"sources":["Arrow.tsx"],"names":["Arrow","direction","isDisabled","onPress","theme","React","useContext","ThemeContext","top","bottom","left","right","disabled","normalArrowContainer","disabledArrowContainer","Icons","arrow","normalArrowImage","disabledArrowImage","styles","memo","StyleSheet","create","transform","rotate"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;AASA,MAAMA,KAAsB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACrE,QAAMC,KAAK,GAAGC,eAAMC,UAAN,CAAwBC,sBAAxB,CAAd;;AAEA,sBACE,6BAAC,6BAAD;AACE,IAAA,OAAO,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,MAAM,EAAE,EAAnB;AAAuBC,MAAAA,IAAI,EAAE,EAA7B;AAAiCC,MAAAA,KAAK,EAAE;AAAxC,KADX;AAEE,IAAA,kBAAkB,YAAKV,SAAL,WAFpB;AAGE,IAAA,iBAAiB,EAAE,yCAHrB;AAIE,IAAA,kBAAkB,EAAE;AAAEW,MAAAA,QAAQ,EAAEV;AAAZ,KAJtB;AAKE,IAAA,QAAQ,EAAEA,UALZ;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,KAAK,EAAE,CAACC,KAAK,CAACS,oBAAP,EAA6BX,UAAU,IAAIE,KAAK,CAACU,sBAAjD;AAPT,kBAQE,6BAAC,kBAAD;AACE,IAAA,MAAM,EAAE,aADV;AAEE,IAAA,gCAAgC,MAFlC;AAGE,IAAA,MAAM,EAAEC,eAAMC,KAAN,CAAYN,IAAZ,CAAiB,MAAjB,CAHV;AAIE,IAAA,KAAK,EAAE,CACLN,KAAK,CAACa,gBADD,EAELf,UAAU,IAAIE,KAAK,CAACc,kBAFf,EAGLjB,SAAS,KAAK,OAAd,IAAyBkB,MAAM,CAACR,KAH3B;AAJT,IARF,CADF;AAqBD,CAxBD;;4BA0BeN,eAAMe,IAAN,CAAWpB,KAAX,C;;;;AAEf,MAAMmB,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BX,EAAAA,KAAK,EAAE;AACLY,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAD;AADN;AADwB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Image, TouchableOpacity, StyleSheet } from 'react-native';\n\nimport Icons from '../Icons';\nimport { ThemeContext } from '../Contexts';\nimport type { Theme } from '../Entities';\n\nexport interface Props {\n  direction: 'left' | 'right';\n  isDisabled?: boolean;\n  onPress: () => void;\n}\n\nconst Arrow: React.FC<Props> = ({ direction, isDisabled, onPress }) => {\n  const theme = React.useContext<Theme>(ThemeContext);\n\n  return (\n    <TouchableOpacity\n      hitSlop={{ top: 20, bottom: 20, left: 20, right: 20 }}\n      accessibilityLabel={`${direction} arrow`}\n      accessibilityHint={'Press to move to previous month or year'}\n      accessibilityState={{ disabled: isDisabled }}\n      disabled={isDisabled}\n      onPress={onPress}\n      style={[theme.normalArrowContainer, isDisabled && theme.disabledArrowContainer]}>\n      <Image\n        testID={'arrow-image'}\n        accessibilityIgnoresInvertColors\n        source={Icons.arrow.left['16px']}\n        style={[\n          theme.normalArrowImage,\n          isDisabled && theme.disabledArrowImage,\n          direction === 'right' && styles.right,\n        ]}\n      />\n    </TouchableOpacity>\n  );\n};\n\nexport default React.memo(Arrow);\n\nconst styles = StyleSheet.create({\n  right: {\n    transform: [{ rotate: '180deg' }],\n  },\n});\n"]}