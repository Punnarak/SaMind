{"version":3,"sources":["Title.test.tsx"],"names":["dayjs","extend","utc","test","title","TitlePage","expect","component","toBeTruthy","date","locale","DefaultLocale","text","toHaveTextContent","describe","activeView","VIEW","MONTH","YEAR","testLocale","onPress","jest","fn","fireEvent","press","toHaveBeenCalledTimes","month","isDisabled","toBeDisabled","toBeEnabled","toHaveStyle","theme","titleContainer","titleText","constructor","getByTestId","getByRole","months","DefaultTheme","marginTop","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport type { ReactTestInstance } from 'react-test-renderer';\nimport { render, fireEvent } from '@testing-library/react-native';\n\nimport { ThemeContext } from '../Contexts';\nimport { DefaultTheme } from '../Themes';\nimport { DefaultLocale } from '../Locales';\nimport { VIEW } from '../Constants';\n\nimport Title, { Props } from './Title';\n\ndayjs.extend(utc);\n\ntest('Title render without error', () => {\n  const title = new TitlePage({});\n  expect(title.component).toBeTruthy();\n});\n\ntest('Title renders date string in default format', () => {\n  const title = new TitlePage({ date: '2020-09-18', locale: DefaultLocale });\n  expect(title.text).toHaveTextContent('September 2020');\n});\n\ndescribe('Title format switches depending on the active view', () => {\n  test('Month view format', () => {\n    const title = new TitlePage({ date: '2020-09-18', activeView: VIEW.MONTH });\n    expect(title.text).toHaveTextContent('September 2020');\n  });\n\n  test('Year view format', () => {\n    const title = new TitlePage({ date: '2020-09-18', activeView: VIEW.YEAR });\n    expect(title.text).toHaveTextContent('2020');\n  });\n});\n\ntest('Title receives locale context', () => {\n  const title = new TitlePage({ date: '2020-09-18', locale: testLocale });\n  expect(title.text).toHaveTextContent('I 2020');\n});\n\ntest('Title calls onPress callback when clicked', () => {\n  const onPress = jest.fn();\n  const title = new TitlePage({ onPress });\n  fireEvent.press(title.component);\n  expect(onPress).toHaveBeenCalledTimes(1);\n});\n\ndescribe('Enabling and disabling', () => {\n  test('Disable clicking if prop ´isDisabled´ is true', () => {\n    const month = new TitlePage({ isDisabled: true });\n    expect(month.component).toBeDisabled();\n  });\n\n  test('Enable clicking if prop ´isDisabled´ is false', () => {\n    const month = new TitlePage({ isDisabled: false });\n    expect(month.component).toBeEnabled();\n  });\n});\n\ndescribe('Theme context', () => {\n  test('Title container applies titleContainer theme', () => {\n    const title = new TitlePage({});\n    expect(title.component).toHaveStyle(theme.titleContainer);\n  });\n\n  test('Title text applies titleText theme', () => {\n    const title = new TitlePage({});\n    expect(title.text).toHaveStyle(theme.titleText);\n  });\n});\n\nclass TitlePage {\n  component: ReactTestInstance;\n  text: ReactTestInstance;\n\n  constructor({\n    date = '2020-01-01',\n    locale = DefaultLocale,\n    onPress = () => {},\n    isDisabled = false,\n    activeView = VIEW.MONTH,\n  }: Partial<Props>) {\n    const { getByTestId, getByRole } = render(\n      <ThemeContext.Provider value={theme}>\n        <Title {...{ locale, activeView, date, onPress, isDisabled }} />\n      </ThemeContext.Provider>\n    );\n\n    this.component = getByRole('button');\n    this.text = getByTestId('title-text');\n  }\n}\n\nconst testLocale = {\n  ...DefaultLocale,\n  months: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'],\n};\n\nconst theme = {\n  ...DefaultTheme,\n  titleContainer: {\n    marginTop: 10,\n    backgroundColor: 'orange',\n  },\n  titleText: {\n    color: 'pink',\n  },\n};\n"]}