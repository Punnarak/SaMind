{"version":3,"sources":["Arrow.test.tsx"],"names":["test","arrow","ArrowPage","direction","expect","component","toBeTruthy","onPress","jest","fn","month","fireEvent","press","toHaveBeenCalledTimes","describe","isDisabled","toBeDisabled","toBeEnabled","toHaveStyle","theme","normalArrowContainer","not","disabledArrowContainer","image","normalArrowImage","disabledArrowImage","rotation","transform","rotate","constructor","getByLabelText","getByTestId","DefaultTheme","marginTop","backgroundColor","marginBottom","tintColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type { ReactTestInstance } from 'react-test-renderer';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { ThemeContext } from '../Contexts';\nimport { DefaultTheme } from '../Themes';\n\nimport Arrow, { Props } from './Arrow';\n\ntest('Arrow renders without error', () => {\n  const arrow = new ArrowPage({ direction: 'left' });\n  expect(arrow.component).toBeTruthy();\n});\n\ntest('Component calls onPress callback when clicked', () => {\n  const onPress = jest.fn();\n  const month = new ArrowPage({ onPress });\n  fireEvent.press(month.component);\n  expect(onPress).toHaveBeenCalledTimes(1);\n});\n\ndescribe('Enabling and disabling', () => {\n  test('Disable clicking if prop ´isDisabled´ is true', () => {\n    const arrow = new ArrowPage({ isDisabled: true });\n    expect(arrow.component).toBeDisabled();\n  });\n\n  test('Enable clicking if prop ´isDisabled´ is false', () => {\n    const arrow = new ArrowPage({ isDisabled: false });\n    expect(arrow.component).toBeEnabled();\n  });\n});\n\ndescribe('Theme context', () => {\n  test('Container applies normal theme in enabled state', () => {\n    const arrow = new ArrowPage({});\n    expect(arrow.component).toHaveStyle(theme.normalArrowContainer);\n    expect(arrow.component).not.toHaveStyle(theme.disabledArrowContainer);\n  });\n\n  test('Container applies isDisabled theme in isDisabled state', () => {\n    const arrow = new ArrowPage({ isDisabled: true });\n    expect(arrow.component).toHaveStyle([\n      theme.normalArrowContainer,\n      theme.disabledArrowContainer,\n    ]);\n  });\n\n  test('Image applies normal theme in enabled state', () => {\n    const arrow = new ArrowPage({});\n    expect(arrow.image).toHaveStyle(theme.normalArrowImage);\n    expect(arrow.image).not.toHaveStyle(theme.disabledArrowImage);\n  });\n\n  test('Image applies isDisabled theme in isDisabled state', () => {\n    const arrow = new ArrowPage({ isDisabled: true });\n    expect(arrow.image).toHaveStyle([theme.normalArrowImage, theme.disabledArrowImage]);\n  });\n});\n\ndescribe('Automatic image rotation', () => {\n  const rotation = { transform: [{ rotate: '180deg' }] };\n\n  test('Rotate \"right\" arrow towards the right', () => {\n    const arrow = new ArrowPage({ direction: 'right' });\n    expect(arrow.image).toHaveStyle(rotation);\n  });\n\n  test('Do not rotate \"left\" arrows', () => {\n    const arrow = new ArrowPage({ direction: 'left' });\n    expect(arrow.image).not.toHaveStyle(rotation);\n  });\n});\n\nclass ArrowPage {\n  component: ReactTestInstance;\n  image: ReactTestInstance;\n\n  constructor({\n    direction = 'left',\n    isDisabled = false,\n    onPress = () => {},\n  }: Partial<Props>) {\n    const { getByLabelText, getByTestId } = render(\n      <ThemeContext.Provider value={theme}>\n        <Arrow {...{ direction, isDisabled, onPress }} />\n      </ThemeContext.Provider>\n    );\n\n    this.component = getByLabelText(`${direction} arrow`);\n    this.image = getByTestId('arrow-image');\n  }\n}\n\nconst theme = {\n  ...DefaultTheme,\n  normalArrowContainer: {\n    marginTop: 10,\n    backgroundColor: 'green',\n  },\n  disabledArrowContainer: {\n    marginBottom: 10,\n    backgroundColor: 'gray',\n  },\n  normalArrowImage: {\n    marginTop: 10,\n    tintColor: 'green',\n  },\n  disabledArrowImage: {\n    marginBottom: 10,\n    tintColor: 'gray',\n  },\n};\n"]}