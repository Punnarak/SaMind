{"version":3,"sources":["Title.tsx"],"names":["dayjs","extend","utc","Title","activeView","date","onPress","isDisabled","locale","theme","React","useContext","ThemeContext","_date","local","title","VIEW","MONTH","format","_onPress","useCallback","disabled","titleContainer","titleText"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;AAEAA,eAAMC,MAAN,CAAaC,YAAb;;AAUA,MAAMC,KAAsB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA,UAA7B;AAAyCC,EAAAA;AAAzC,CAAD,KAAuD;AACpF,QAAMC,KAAY,GAAGC,eAAMC,UAAN,CAAwBC,sBAAxB,CAArB;;AACA,QAAMC,KAAK,GAAG,oBAAMR,IAAN,EAAYG,MAAZ,CAAmBA,MAAnB,EAA2BM,KAA3B,EAAd;;AAEA,QAAMC,KAAK,GACTX,UAAU,KAAKY,gBAAKC,KAApB,GAA4BJ,KAAK,CAACK,MAAN,CAAa,WAAb,CAA5B,GAAwDL,KAAK,CAACK,MAAN,CAAa,MAAb,CAD1D;;AAEA,QAAMC,QAAQ,GAAGT,eAAMU,WAAN,CAAkB,MAAMd,OAAO,CAACD,IAAD,CAA/B,EAAuC,CAACA,IAAD,EAAOC,OAAP,CAAvC,CAAjB;;AAEA,sBACE,6BAAC,6BAAD;AACE,IAAA,MAAM,EAAE,OADV;AAEE,IAAA,iBAAiB,EAAE,QAFrB;AAGE,IAAA,iBAAiB,EAAE,gCAHrB;AAIE,IAAA,kBAAkB,EAAES,KAJtB;AAKE,IAAA,kBAAkB,EAAE;AAAEM,MAAAA,QAAQ,EAAEd;AAAZ,KALtB;AAME,IAAA,KAAK,EAAEE,KAAK,CAACa,cANf;AAOE,IAAA,QAAQ,EAAEf,UAPZ;AAQE,IAAA,OAAO,EAAEY;AARX,kBASE,6BAAC,iBAAD;AAAM,IAAA,MAAM,EAAE,YAAd;AAA4B,IAAA,KAAK,EAAEV,KAAK,CAACc;AAAzC,KACGR,KADH,CATF,CADF;AAeD,CAvBD;;eAyBeZ,K","sourcesContent":["import React from 'react';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport { VIEW } from '../Constants';\nimport type { Theme, Locale } from '../Entities';\nimport { ThemeContext } from '../Contexts';\n\ndayjs.extend(utc);\n\nexport interface Props {\n  date: string;\n  locale: Locale;\n  onPress: (date: string) => void;\n  isDisabled?: boolean;\n  activeView: VIEW;\n}\n\nconst Title: React.FC<Props> = ({ activeView, date, onPress, isDisabled, locale }) => {\n  const theme: Theme = React.useContext<Theme>(ThemeContext);\n  const _date = dayjs(date).locale(locale).local();\n\n  const title =\n    activeView === VIEW.MONTH ? _date.format('MMMM YYYY') : _date.format('YYYY');\n  const _onPress = React.useCallback(() => onPress(date), [date, onPress]);\n\n  return (\n    <TouchableOpacity\n      testID={'title'}\n      accessibilityRole={'button'}\n      accessibilityHint={'Press to switch calendar views'}\n      accessibilityLabel={title}\n      accessibilityState={{ disabled: isDisabled }}\n      style={theme.titleContainer}\n      disabled={isDisabled}\n      onPress={_onPress}>\n      <Text testID={'title-text'} style={theme.titleText}>\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Title;\n"]}