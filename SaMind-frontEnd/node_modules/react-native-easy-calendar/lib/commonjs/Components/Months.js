"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _Contexts = require("../Contexts");

var _Utils = require("../Utils");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Months = ({
  MonthComponent: CustomMonth,
  onPressMonth,
  dateProperties,
  visibleDate,
  minDate,
  maxDate
}) => {
  const theme = _react.default.useContext(_Contexts.ThemeContext);

  const locale = _react.default.useContext(_Contexts.LocaleContext);

  const monthsOfVisibleYear = (0, _Utils.dateRange)(visibleDate.startOf('year'), visibleDate.endOf('year'), 'month');
  const selectedMonths = (0, _react.useMemo)(() => {
    return Object.entries(dateProperties).reduce((selected, [date, properties]) => {
      if (properties.isSelected) {
        const month = (0, _dayjs.default)(date).startOf('month').format('YYYY-MM-DD');
        selected[month] = true;
      }

      return selected;
    }, {});
  }, [dateProperties]);
  const Month = CustomMonth || _.Month;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: theme.monthsContainer,
    testID: 'months-container'
  }, monthsOfVisibleYear.map((month, index) => {
    return /*#__PURE__*/_react.default.createElement(Month, {
      key: index,
      locale: locale,
      date: month.format('YYYY-MM-DD'),
      isSelected: selectedMonths[month.format('YYYY-MM-DD')],
      onPress: onPressMonth,
      isDisabled: !!(maxDate && month.startOf('month').isAfter(maxDate, 'day')) || !!(minDate && month.endOf('month').isBefore(minDate, 'day'))
    });
  }));
};

var _default = /*#__PURE__*/_react.default.memo(Months);

exports.default = _default;
//# sourceMappingURL=Months.js.map