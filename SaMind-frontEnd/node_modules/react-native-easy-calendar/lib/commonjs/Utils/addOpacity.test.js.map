{"version":3,"sources":["addOpacity.test.ts"],"names":["describe","test","color","opacity","after","expect","toBe"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,qCAAD,EAAwC,MAAM;AACpDC,EAAAA,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1D,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,GAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,gDAAD,EAAmD,MAAM;AAC3D,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,IAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1D,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,GAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,gDAAD,EAAmD,MAAM;AAC3D,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,IAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,8CAAD,EAAiD,MAAM;AACzD,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,CAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMD,CA/BO,CAAR;AAiCAJ,QAAQ,CAAC,6DAAD,EAAgE,MAAM;AAC5EC,EAAAA,IAAI,CAAC,uDAAD,EAA0D,MAAM;AAClE,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,GAAhB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMAH,EAAAA,IAAI,CAAC,oDAAD,EAAuD,MAAM;AAC/D,UAAMC,KAAK,GAAG,SAAd;AACA,UAAMC,OAAO,GAAG,CAAC,EAAjB;AACA,UAAMC,KAAK,GAAG,WAAd;AACAC,IAAAA,MAAM,CAAC,yBAAWH,KAAX,EAAkBC,OAAlB,CAAD,CAAN,CAAmCG,IAAnC,CAAwCF,KAAxC;AACD,GALG,CAAJ;AAMD,CAbO,CAAR","sourcesContent":["import addOpacity from './addOpacity';\n\ndescribe('Converts color #rrggbb to #rrggbbaa', () => {\n  test('Should return #0000001A for opacity 0.1 (10%)', () => {\n    const color = '#000000';\n    const opacity = 0.1;\n    const after = '#0000001A';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n  test('Should return #00000040 for opacity 0.25 (25%)', () => {\n    const color = '#000000';\n    const opacity = 0.25;\n    const after = '#00000040';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n  test('Should return #0000007F for opacity 0.5 (50%)', () => {\n    const color = '#000000';\n    const opacity = 0.5;\n    const after = '#00000080';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n  test('Should return #000000BF for opacity 0.75 (75%)', () => {\n    const color = '#000000';\n    const opacity = 0.75;\n    const after = '#000000BF';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n  test('Should return #000000FF for opacity 1 (100%)', () => {\n    const color = '#000000';\n    const opacity = 1;\n    const after = '#000000FF';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n});\n\ndescribe('Handle opacity out of range (less then 0 or greater than 1)', () => {\n  test('Should return #000000FF for an opacity greater than 1', () => {\n    const color = '#000000';\n    const opacity = 100;\n    const after = '#000000FF';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n  test('Should return #000000FF for an opacity less than 0', () => {\n    const color = '#000000';\n    const opacity = -20;\n    const after = '#00000000';\n    expect(addOpacity(color, opacity)).toBe(after);\n  });\n});\n"]}