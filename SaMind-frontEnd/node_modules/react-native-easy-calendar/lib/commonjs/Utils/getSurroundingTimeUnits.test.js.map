{"version":3,"sources":["getSurroundingTimeUnits.test.ts"],"names":["describe","test","month","expect","last","format","toEqual","next","year"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCA,EAAAA,QAAQ,CAAC,qCAAD,EAAwC,MAAM;AACpDC,IAAAA,IAAI,CAAC,SAAD,EAAY,MAAM;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAY,sCAAwB,YAAxB,CAAlB;AACAC,MAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,MAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,KAJG,CAAJ;AAKAL,IAAAA,IAAI,CAAC,OAAD,EAAU,MAAM;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAY,sCAAwB,YAAxB,CAAlB;AACAC,MAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,MAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,KAJG,CAAJ;AAKD,GAXO,CAAR;AAaAL,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAM;AAAEC,MAAAA;AAAF,QAAY,sCAAwB,YAAxB,CAAlB;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,IAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,UAAM;AAAEC,MAAAA;AAAF,QAAY,sCAAwB,YAAxB,CAAlB;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,IAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAM;AAAEC,MAAAA;AAAF,QAAY,sCAAwB,YAAxB,CAAlB;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,IAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,UAAM;AAAEC,MAAAA;AAAF,QAAY,sCAAwB,YAAxB,CAAlB;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACAH,IAAAA,MAAM,CAACD,KAAK,CAACK,IAAN,CAAWF,MAAX,CAAkB,YAAlB,CAAD,CAAN,CAAwCC,OAAxC,CAAgD,YAAhD;AACD,GAJG,CAAJ;AAKD,CAlCO,CAAR;AAoCAN,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAM;AAAEO,MAAAA;AAAF,QAAW,sCAAwB,YAAxB,CAAjB;AACAL,IAAAA,MAAM,CAACK,IAAI,CAACJ,IAAL,CAAUC,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACAH,IAAAA,MAAM,CAACK,IAAI,CAACD,IAAL,CAAUF,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,UAAM;AAAEO,MAAAA;AAAF,QAAW,sCAAwB,YAAxB,CAAjB;AACAL,IAAAA,MAAM,CAACK,IAAI,CAACJ,IAAL,CAAUC,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACAH,IAAAA,MAAM,CAACK,IAAI,CAACD,IAAL,CAAUF,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAChD,UAAM;AAAEO,MAAAA;AAAF,QAAW,sCAAwB,YAAxB,CAAjB;AACAL,IAAAA,MAAM,CAACK,IAAI,CAACJ,IAAL,CAAUC,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACAH,IAAAA,MAAM,CAACK,IAAI,CAACD,IAAL,CAAUF,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACD,GAJG,CAAJ;AAKAL,EAAAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,UAAM;AAAEO,MAAAA;AAAF,QAAW,sCAAwB,YAAxB,CAAjB;AACAL,IAAAA,MAAM,CAACK,IAAI,CAACJ,IAAL,CAAUC,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACAH,IAAAA,MAAM,CAACK,IAAI,CAACD,IAAL,CAAUF,MAAV,CAAiB,YAAjB,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,YAA/C;AACD,GAJG,CAAJ;AAKD,CArBO,CAAR","sourcesContent":["import getSurroundingTimeUnits from './getSurroundingTimeUnits';\n\ndescribe('Surrounding months', () => {\n  describe('works for months surrouding Febuary', () => {\n    test('January', () => {\n      const { month } = getSurroundingTimeUnits('2020-01-25');\n      expect(month.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n      expect(month.next.format('YYYY-MM-DD')).toEqual('2020-02-01');\n    });\n    test('March', () => {\n      const { month } = getSurroundingTimeUnits('2020-03-25');\n      expect(month.last.format('YYYY-MM-DD')).toEqual('2020-02-29');\n      expect(month.next.format('YYYY-MM-DD')).toEqual('2020-04-01');\n    });\n  });\n\n  test('works for end-of-month visible date', () => {\n    const { month } = getSurroundingTimeUnits('2020-07-31');\n    expect(month.last.format('YYYY-MM-DD')).toEqual('2020-06-30');\n    expect(month.next.format('YYYY-MM-DD')).toEqual('2020-08-01');\n  });\n  test('works for start-of-month visible date', () => {\n    const { month } = getSurroundingTimeUnits('2020-07-01');\n    expect(month.last.format('YYYY-MM-DD')).toEqual('2020-06-30');\n    expect(month.next.format('YYYY-MM-DD')).toEqual('2020-08-01');\n  });\n  test('works for end-of-year visible dates', () => {\n    const { month } = getSurroundingTimeUnits('2020-12-31');\n    expect(month.last.format('YYYY-MM-DD')).toEqual('2020-11-30');\n    expect(month.next.format('YYYY-MM-DD')).toEqual('2021-01-01');\n  });\n  test('works for start-of-year visible dates', () => {\n    const { month } = getSurroundingTimeUnits('2020-01-01');\n    expect(month.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n    expect(month.next.format('YYYY-MM-DD')).toEqual('2020-02-01');\n  });\n});\n\ndescribe('Surrounding years', () => {\n  test('works for end-of-month visible date', () => {\n    const { year } = getSurroundingTimeUnits('2020-07-31');\n    expect(year.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n    expect(year.next.format('YYYY-MM-DD')).toEqual('2021-01-01');\n  });\n  test('works for start-of-month visible date', () => {\n    const { year } = getSurroundingTimeUnits('2020-07-01');\n    expect(year.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n    expect(year.next.format('YYYY-MM-DD')).toEqual('2021-01-01');\n  });\n  test('works for end-of-year visible dates', () => {\n    const { year } = getSurroundingTimeUnits('2020-12-31');\n    expect(year.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n    expect(year.next.format('YYYY-MM-DD')).toEqual('2021-01-01');\n  });\n  test('works for start-of-year visible dates', () => {\n    const { year } = getSurroundingTimeUnits('2020-01-01');\n    expect(year.last.format('YYYY-MM-DD')).toEqual('2019-12-31');\n    expect(year.next.format('YYYY-MM-DD')).toEqual('2021-01-01');\n  });\n});\n"]}